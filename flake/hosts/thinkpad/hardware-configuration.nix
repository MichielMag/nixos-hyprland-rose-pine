# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}:

{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = [
    "xhci_pci"
    "thunderbolt"
    "nvme"
    "usb_storage"
    "sd_mod"
  ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [
    "kvm-intel"
  ];
  boot.kernelParams = [ "i915.force_probe=a7a0k" ];

  boot.extraModulePackages = [ ];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/389d0454-727c-47c6-8880-0e447d5528b6";
    fsType = "ext4";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/9F6B-1C08";
    fsType = "vfat";
    options = [
      "fmask=0077"
      "dmask=0077"
    ];
  };

  fileSystems."/windows" = {
    device = "/dev/disk/by-uuid/8A582DA3582D8ECF";
    fsType = "ntfs";
    options = [
      "ro"
    ];
  };
  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp0s31f6.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp0s20f3.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

  # Load nvidia driver for Xorg and Wayland
  services.xserver.videoDrivers = [
    "nvidia"
    "i915"
  ];

  services.blueman = {
    enable = true;
  };
  services.hardware.bolt.enable = true;
  services.pipewire.wireplumber.configPackages = [
    (pkgs.writeTextDir "share/wireplumber/main.lua.d/98-rename-speakers" ''
      alsa_monitor.rules = {
        {
          matches = {{{ "node.name", "matches", "alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__HDMI1__sink" }}};
          actions = {
            update-props = {
              node.description = "External Monitor Speakers [1]"
            }
          }
        },
        {
          matches = {{{ "node.name", "matches", "alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__HDMI2__sink" }}};
          actions = {
            update-props = {
              node.description = "External Monitor Speakers [2]"
            }
          }
        },
        {
          matches = {{{ "node.name", "matches", "alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__HDMI3__sink" }}};
          actions = {
            update-props = {
              node.description = "External Monitor Speakers [3]"
            }
          }
        },
        {
          matches = {{{ "node.name", "matches", "alsa_output.usb-Sony_Interactive_Entertainment_Wireless_Headset-00.analog-stereo" }}};
          actions = {
            update-props = {
              node.description = "PS5 Headset Speakers"
            }
          }
        },
        {
          matches = {{{ "node.name", "matches", "alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__Headphones__sink" }}};
          actions = {
            update-props = {
              node.description = "Internal Headset Speakers"
            }
          }
        },
        {
          matches = {{{ "node.name", "matches", "alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__Speaker__sink" }}};
          actions = {
            update-props = {
              node.description = "Internal Speakers"
            }
          }
        },
      }
    '')
    (pkgs.writeTextDir "share/wireplumber/main.lua.d/98-rename-microphones" ''
      alsa_monitor.rules = {
        {
          matches = {{{ "node.name", "matches", "alsa_input.usb-Sonix_Technology_Co.__Ltd._QHD_Webcam_SN0001-02.analog-stereo" }}};
          actions = {
            update-props = {
              node.description = "Foscam Mic."
            }
          }
        },
        {
          matches = {{{ "node.name", "matches", "alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__HDMI1__sink.monitor" }}};
          actions = {
            update-props = {
              node.description = "External Monitor Mic. [1]"
            }
          }
        },
        {
          matches = {{{ "node.name", "matches", "alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__HDMI2__sink.monitor" }}};
          actions = {
            update-props = {
              node.description = "External Monitor Mic. [2]"
            }
          }
        },
        {
          matches = {{{ "node.name", "matches", "alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__HDMI3__sink.monitor" }}};
          actions = {
            update-props = {
              node.description = "External Monitor Mic. [3]"
            }
          }
        },
        {
          matches = {{{ "node.name", "matches", "alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__Headphones__sink.monitor" }}};
          actions = {
            update-props = {
              node.description = "Internal Headset Mic."
            }
          }
        },
        {
          matches = {{{ "node.name", "matches", "alsa_input.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__Mic1__source" }}};
          actions = {
            update-props = {
              node.description = "Internal Digital Mic."
            }
          }
        },
        {
          matches = {{{ "node.name", "matches", "alsa_input.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__Mic2__source" }}};
          actions = {
            update-props = {
              node.description = "Internal Stereo Mic."
            }
          }
        },
        {
          matches = {{{ "node.name", "matches", "alsa_output.usb-Sony_Interactive_Entertainment_Wireless_Headset-00.analog-stereo.monitor" }}};
          actions = {
            update-props = {
              node.description = "PS5 Headset Stereo Mic."
            }
          }
        },
        {
          matches = {{{ "node.name", "matches", "alsa_input.usb-Sony_Interactive_Entertainment_Wireless_Headset-00.mono-fallback" }}};
          actions = {
            update-props = {
              node.description = "PS5 Headset Mono Mic."
            }
          }
        }
      }
    '')
  ];
  hardware = {
    bluetooth = {
      enable = true;
      powerOnBoot = true;
    };
    nvidia = {

      # Modesetting is required.
      modesetting.enable = true;

      # Nvidia power management. Experimental, and can cause sleep/suspend to fail.
      # Enable this if you have graphical corruption issues or application crashes after waking
      # up from sleep. This fixes it by saving the entire VRAM memory to /tmp/ instead 
      # of just the bare essentials.
      powerManagement.enable = false;

      # Fine-grained power management. Turns off GPU when not in use.
      # Experimental and only works on modern Nvidia GPUs (Turing or newer).
      powerManagement.finegrained = false;

      # Use the NVidia open source kernel module (not to be confused with the
      # independent third-party "nouveau" open source driver).
      # Support is limited to the Turing and later architectures. Full list of 
      # supported GPUs is at: 
      # https://github.com/NVIDIA/open-gpu-kernel-modules#compatible-gpus 
      # Only available from driver 515.43.04+
      # Currently alpha-quality/buggy, so false is currently the recommended setting.
      open = false;

      # Enable the Nvidia settings menu,
      # accessible via `nvidia-settings`.
      nvidiaSettings = true;

      # Optionally, you may need to select the appropriate driver version for your specific GPU.
      package = config.boot.kernelPackages.nvidiaPackages.stable;
      prime = {
        offload = {
          enable = true;
          enableOffloadCmd = true;
        };
        # sync = {
        #   enable = true;
        # };
        # Make sure to use the correct Bus ID values for your system!
        intelBusId = "PCI:0:2:0";
        nvidiaBusId = "PCI:3:0:0";
        # amdgpuBusId = "PCI:54:0:0"; For AMD GPU
      };
    };
  };
}
